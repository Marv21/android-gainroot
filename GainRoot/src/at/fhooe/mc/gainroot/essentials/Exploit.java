package at.fhooe.mc.gainroot.essentials;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import at.fhooe.mc.gainroot.R;

/**
 * Used for every exploit which will be integrated in this framework. It
 * provides different methods for the UI, interaction with the user and extract
 * and make files executable.<br>
 * The following steps describe <b>how to integrate a new exploit</b>:<br>
 * <br>
 * <b>first:</b> Create a new class into the
 * <i>at.fhooe.mc.gainroot.exploits</i> package which extends from this class.<br>
 * <b>second:</b> Override constructor with information about the exploit, fill
 * the <i>run()</i> method with your code which execute the exploit.<br>
 * <b>third:</b> Add executable, native compiled file to <i>res/raw/</i> and, if
 * needed, additional files to it.<br>
 * <b>fourth:</b> Add the new exploit to the <i>AndroidManifest.xml</i> as new
 * Activity and also add additional <i>Permissions</i> if not already declared.<br>
 * <br>
 * Thats all! Have fun an enjoy the work.
 * 
 * @author Gerald Schoiber
 * @version 1.0
 * @see File, FileNotFoundException, IOException, InputStream, OutputStream,
 *      Activity, AlertDialog, Dialog, ProgressDialog, Context, DialogInterface,
 *      Bundle, Log, View, OnClickListener, Button, TextView, Toast
 */
public abstract class Exploit extends Activity implements Runnable,
		OnClickListener {

	/**
	 * Hold the resource id of the exploit.
	 * 
	 * @see Integer
	 */
	private int m_id;
	/**
	 * Hold the name of the exploit.
	 * 
	 * @see String
	 */
	private String m_name;
	/**
	 * Hold the Android versions in which the exploit runs.
	 * 
	 * @see String
	 */
	private String m_versions;
	/**
	 * Hold the author of the exploit.
	 * 
	 * @see String
	 */
	private String m_author;
	/**
	 * Hold the date of the exploit where it has been released.
	 * 
	 * @see String
	 */
	private String m_date;
	/**
	 * Hold additional info of the exploit.
	 * 
	 * @see String
	 */
	private String m_info;
	/**
	 * Hold all additional resource id's of the exploit.
	 * 
	 * @see Integer
	 */
	private int[] m_res;
	/**
	 * Hold the Button id which starts the exploit by clicking.
	 * 
	 * @see Button
	 */
	private Button m_button = null;

	/**
	 * Used for debugging to determine which class message to the log.
	 * 
	 * @see tring, Log
	 */
	protected final String TAG = this.getClass().getName();
	/**
	 * Hold the path where the data will be extract to.
	 * 
	 * @see String
	 */
	protected String m_path;
	/**
	 * Hold the ProgressDialog which can be used in the {@link Exploit}.
	 * 
	 * @see ProgressDialog
	 */
	protected ProgressDialog m_pd = null;
	/**
	 * Hold the AlertDialog which can be used in the {@link Exploit}.
	 * 
	 * @see AlertDialog
	 */
	protected AlertDialog m_d = null;

	/**
	 * Constructor to initialize the Exploit with the different parameters.
	 * 
	 * @param _id
	 *            Resource id of the exploit.
	 * @param _name
	 *            Name of the exploit.
	 * @param _versions
	 *            Android versions on which the exploit will run successful.
	 * @param _author
	 *            Author of the exploit.
	 * @param _date
	 *            Release date of the exploit.
	 * @param _info
	 *            Additional information to this exploit.
	 * @param _res
	 *            Additional resource id's which the exploit may need, can be
	 *            <code>null</code>.
	 * @see Integer, String
	 */
	public Exploit(int _id, String _name, String _versions, String _author,
			String _date, String _info, int[] _res) {
		this.m_id = _id;
		this.m_name = _name;
		this.m_versions = _versions;
		this.m_author = _author;
		this.m_date = _date;
		this.m_info = _info;
		this.m_res = _res;
	}

	/**
	 * Getter of exploits resource id.
	 * 
	 * @return Resource id of exploit.
	 * @see Integer
	 */
	public int getId() {
		return this.m_id;
	}

	/**
	 * Getter of exploits name.
	 * 
	 * @return Name of exploit.
	 * @see String
	 */
	public String getName() {
		return this.m_name;
	}

	/**
	 * Getter of exploits Android versions on which the exploit will run
	 * successful.
	 * 
	 * @return Android versions.
	 * @see String
	 */
	public String getVersions() {
		return this.m_versions;
	}

	/**
	 * Getter of exploits author.
	 * 
	 * @return Author.
	 * @see String
	 */
	public String getAuthor() {
		return this.m_author;
	}

	/**
	 * Getter of exploits release date.
	 * 
	 * @return Release date.
	 * @see String
	 */
	public String getDate() {
		return this.m_date;
	}

	/**
	 * Getter of exploits additional information.
	 * 
	 * @return Information.
	 * @see String
	 */
	public String getInfo() {
		return this.m_info;
	}

	/**
	 * Getter of exploits additional resource id's.
	 * 
	 * @return Resource id's.
	 * @see Integer
	 */
	public int[] getRes() {
		return this.m_res;
	}

	/**
	 * Extract files from resources into the location from {@link #m_path} and
	 * make them executable.
	 * 
	 * @param _resource
	 *            Resource id from the data which will be extract and made
	 *            executable.
	 * @return True if all went OK, false otherwise.
	 * @see Byte, Boolean, Integer, String, File, Exception,
	 *      FileNotFoundException, IOException, Log, InputStream, OutputStream,
	 *      Runtime, Context, TAG, m_path
	 */
	private boolean installExploit(int _resource) {
		String filename = getResources().getResourceEntryName(_resource);
		String fullpath = this.m_path + filename;

		File file = new File(fullpath);
		if (file.exists()) {
			Log.d(TAG, "file " + filename + " already exist");
			return true;
		}

		Log.d(TAG, "install: " + fullpath);
		InputStream input = getResources().openRawResource(_resource);
		OutputStream output;
		try {
			output = openFileOutput(filename, Context.MODE_PRIVATE);
		} catch (FileNotFoundException e) {
			Log.e(TAG, e.getMessage());
			return false;
		}

		byte[] buffer = new byte[1024 * 4];
		int n;
		try {
			while ((n = input.read(buffer)) > 0)
				output.write(buffer, 0, n);
			input.close();
			output.close();
		} catch (IOException e) {
			Log.e(TAG, e.getMessage());
			return false;
		}

		try {
			Runtime.getRuntime().exec("chmod 764 " + fullpath).waitFor();
		} catch (Exception e) {
			Log.e(TAG, e.getMessage());
			return false;
		}
		return true;
	}

	/**
	 * Set the ContentView 'R.layout.exploit_detail' to {@link Exploit}, set the
	 * {@link #m_path} where to extract all files, set {@link #m_button} and set
	 * the {@link OnClickListener}, set all informations of the exploit to the
	 * {@link TextView}'s and at least, call the {@link #install()} method to
	 * install the essential executable files.
	 * 
	 * @param _savedInstanceState
	 *            Used in the super class.
	 * @see Bundle, Button, TextView, install(), m_path, m_button
	 */
	@Override
	protected void onCreate(Bundle _savedInstanceState) {
		super.onCreate(_savedInstanceState);
		setContentView(R.layout.exploit_detail);

		this.m_path = getFilesDir().getAbsolutePath() + "/";

		this.m_button = (Button) super.findViewById(R.id.bgainroot);
		this.m_button
				.setOnClickListener((android.view.View.OnClickListener) this);

		// set infos
		((TextView) super.findViewById(R.id.exploit)).setText(getName());
		((TextView) super.findViewById(R.id.versions)).setText(getVersions());
		((TextView) super.findViewById(R.id.author)).setText(getAuthor());
		((TextView) super.findViewById(R.id.date)).setText(getDate());
		((TextView) super.findViewById(R.id.info)).setText(getInfo());

		// install data
		install();
	}

	/**
	 * Installs essential executable files like the 'installsu' script, which
	 * install the 'su' binary file and the 'superuser.apk'.
	 * 
	 * @see Integer, installExploit(int), getId(), getRes()
	 */
	public void install() {
		// install framework
		installExploit(R.raw.installsu);
		installExploit(R.raw.su);
		installExploit(R.raw.superuser);

		// install resources
		int[] res = getRes();
		if (res != null)
			for (int n = 0; n < res.length; n++)
				installExploit(res[n]);

		// install exploit
		installExploit(getId());
	}

	/**
	 * Override this method for
	 */
	@Override
	abstract public void run();

	/**
	 * Show a {@link Toast} on the UI-thread with a specific message from the
	 * parameter.
	 * 
	 * @param _msg
	 *            Message which will be shown on the toast.
	 * @see String, Runnable, Toast, Context
	 */
	protected void showToast(final String _msg) {
		runOnUiThread(new Runnable() {

			@Override
			public void run() {
				Toast.makeText(getApplicationContext(), _msg, Toast.LENGTH_LONG)
						.show();
			}
		});
	}

	/**
	 * Show a {@link AlertDialog} on the UI-thread with title and message from
	 * the parameters.
	 * 
	 * @param _title
	 *            Title of the AlertDialog.
	 * @param _msg
	 *            Message of the AlertDialog.
	 * @see String, Integer, Runnable, AlertDialog, Dialog, DialogInterface,
	 *      OnClickListener, Log, Context, m_d, TAG
	 */
	protected void showDialog(final String _title, final String _msg) {
		runOnUiThread(new Runnable() {

			@Override
			public void run() {
				m_d = new AlertDialog.Builder(getApplicationContext()).create();
				m_d.setTitle(_title);
				m_d.setMessage(_msg);
				m_d.setCancelable(false);
				m_d.setButton(Dialog.BUTTON_POSITIVE, "OK",
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								Log.d(TAG, "end dialog");
								dialog.dismiss();
							}
						});
				m_d.show();
			}
		});
	}

	/**
	 * Show a {@link AlertDialog} on the UI-thread with title and message from
	 * the parameters.
	 * 
	 * @param _title
	 *            Title of the AlertDialog.
	 * @param _msg
	 *            Message of the AlertDialog.
	 * @see Boolean, String, Runnable, ProgressDialog, Context
	 */
	protected void showProgressDialog(final String _title, final String _msg) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				m_pd = ProgressDialog.show(getApplicationContext(), _title,
						_msg, true, false);
			}
		});
	}

	/**
	 * Unlock the screen from the ProgressDialog({@link #m_pd}).
	 * 
	 * @see m_pd
	 */
	protected void unlockScreen() {
		this.m_pd.dismiss();
	}

	/**
	 * Start the exploit in a new {@link Thread} from the {@link #run()} method.
	 * 
	 * @param _view
	 *            Unused.
	 * @see View, Thread
	 */
	@Override
	public void onClick(View _view) {
		new Thread(this).start();
	}

	/**
	 * Called on the end from the {@link #run()} method. If the exploit was
	 * successful or not, the user will get a message via
	 * {@link #showDialog(String, String)}.
	 * 
	 * @param _succsess
	 *            True if all went OK, false otherwise.
	 * @see Boolean, String, showDialog(String, String), m_pd, m_name
	 */
	public void finish(boolean _succsess) {
		if (this.m_pd != null)
			this.m_pd.dismiss();
		if (_succsess)
			showDialog(this.m_name, "successfully root!");
		else
			showDialog(this.m_name, "failure, no root :(");
	}
}
